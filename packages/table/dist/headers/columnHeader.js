/**
 * Copyright 2016 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var classNames = require("classnames");
var PureRender = require("pure-render-decorator");
var React = require("react");
var index_1 = require("../common/index");
var resizable_1 = require("../interactions/resizable");
var resizeHandle_1 = require("../interactions/resizeHandle");
var selectable_1 = require("../interactions/selectable");
var regions_1 = require("../regions");
var columnHeaderCell_1 = require("./columnHeaderCell");
var ColumnHeader = (function (_super) {
    __extends(ColumnHeader, _super);
    function ColumnHeader() {
        var _this = this;
        _super.apply(this, arguments);
        this.renderGhostCell = function (columnIndex, extremaClasses) {
            var grid = _this.props.grid;
            var rect = grid.getGhostCellRect(0, columnIndex);
            var style = {
                flexBasis: rect.width + "px",
                width: rect.width + "px",
            };
            return (React.createElement(columnHeaderCell_1.ColumnHeaderCell, {key: "bp-table-col-" + columnIndex, className: classNames(extremaClasses), style: style}));
        };
        this.renderCell = function (columnIndex, extremaClasses) {
            var _a = _this.props, allowMultipleSelection = _a.allowMultipleSelection, cellRenderer = _a.cellRenderer, grid = _a.grid, isResizable = _a.isResizable, maxColumnWidth = _a.maxColumnWidth, minColumnWidth = _a.minColumnWidth, onColumnWidthChanged = _a.onColumnWidthChanged, onLayoutLock = _a.onLayoutLock, onResizeGuide = _a.onResizeGuide, onSelection = _a.onSelection, selectedRegions = _a.selectedRegions, selectedRegionTransform = _a.selectedRegionTransform;
            var rect = grid.getColumnRect(columnIndex);
            var handleSizeChanged = function (size) {
                onResizeGuide([rect.left + size + 1]);
            };
            var handleResizeEnd = function (size) {
                onResizeGuide(null);
                onColumnWidthChanged(columnIndex, size);
            };
            var handleDoubleClick = function () {
                var width = _this.props.locator.getWidestVisibleCellInColumn(columnIndex);
                var clampedWidth = index_1.Utils.clamp(width, minColumnWidth, maxColumnWidth);
                onResizeGuide(null);
                onColumnWidthChanged(columnIndex, clampedWidth);
            };
            var cell = cellRenderer(columnIndex);
            var className = classNames(cell.props.className, extremaClasses, {
                "bp-table-draggable": (onSelection != null),
            });
            var isColumnSelected = regions_1.Regions.hasFullColumn(selectedRegions, columnIndex);
            return (React.createElement(selectable_1.DragSelectable, {allowMultipleSelection: allowMultipleSelection, key: "bp-table-col-" + columnIndex, locateClick: _this.locateClick, locateDrag: _this.locateDrag, onSelection: onSelection, selectedRegions: selectedRegions, selectedRegionTransform: selectedRegionTransform}, 
                React.createElement(resizable_1.Resizable, {isResizable: isResizable, maxSize: maxColumnWidth, minSize: minColumnWidth, onDoubleClick: handleDoubleClick, onLayoutLock: onLayoutLock, onResizeEnd: handleResizeEnd, onSizeChanged: handleSizeChanged, orientation: resizeHandle_1.Orientation.VERTICAL, size: rect.width}, React.cloneElement(cell, { className: className, isColumnSelected: isColumnSelected }))
            ));
        };
        this.locateClick = function (event) {
            // Abort selection unless the mouse actually hit a table header. This allows
            // users to supply interactive components in their renderHeader methods.
            if (!columnHeaderCell_1.ColumnHeaderCell.isHeaderMouseTarget(event.target)) {
                return null;
            }
            var col = _this.props.locator.convertPointToColumn(event.clientX);
            return regions_1.Regions.column(col);
        };
        this.locateDrag = function (_event, coords) {
            var colStart = _this.props.locator.convertPointToColumn(coords.activation[0]);
            var colEnd = _this.props.locator.convertPointToColumn(coords.current[0]);
            return regions_1.Regions.column(colStart, colEnd);
        };
    }
    ColumnHeader.prototype.render = function () {
        var _a = this.props, grid = _a.grid, viewportRect = _a.viewportRect, columnIndexStart = _a.columnIndexStart, columnIndexEnd = _a.columnIndexEnd;
        var cells = [];
        for (var columnIndex = columnIndexStart; columnIndex <= columnIndexEnd; columnIndex++) {
            var extremaClasses = grid.getExtremaClasses(0, columnIndex, 1, columnIndexEnd);
            var renderer = grid.isGhostIndex(-1, columnIndex) ? this.renderGhostCell : this.renderCell;
            cells.push(renderer(columnIndex, extremaClasses));
        }
        // always set width so that the layout can push out the element unless it overflows.
        var style = {
            width: grid.getRect().width + "px",
        };
        // use CSS translation to offset the cells
        if (viewportRect != null) {
            style.transform = "translate3d(" + (grid.getColumnRect(columnIndexStart).left - viewportRect.left) + "px, 0, 0)";
        }
        var classes = classNames("bp-table-thead", "bp-table-column-header-tr", {
            "bp-table-draggable": (this.props.onSelection != null),
        });
        return React.createElement("div", {style: style, className: classes}, cells);
    };
    ColumnHeader.defaultProps = {
        isResizable: true,
    };
    ColumnHeader = __decorate([
        PureRender
    ], ColumnHeader);
    return ColumnHeader;
}(React.Component));
exports.ColumnHeader = ColumnHeader;

//# sourceMappingURL=data:application/json;base64,
