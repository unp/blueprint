/**
 * Copyright 2016 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PureRender = require("pure-render-decorator");
var React = require("react");
var ReactDOM = require("react-dom");
var dragEvents_1 = require("./dragEvents");
/**
 * This component provides a simple interface for combined drag and/or click
 * events.
 *
 * Since the mouse interactions for drag and click are overloaded, here are
 * the events that will fire in these cases:
 *
 * A Click Interaction
 * 1. The user presses down on the render element, triggering the onActivate
 *    callback.
 * 2. The user releases the mouse button without moving it, triggering the
 *    onClick callback.
 *
 * A Drag Interaction
 * 1. The user presses down on the render element, triggering the onActivate
 *    callback.
 * 2. The user moves the mouse, triggering the onDragMove callback.
 * 3. The user moves the mouse, triggering the onDragMove callback.
 * 4. The user moves the mouse, triggering the onDragMove callback.
 * 5. The user releases the mouse button, triggering a final onDragMove
 *    callback as well as an onDragEnd callback.
 *
 * If `false` is returned from the onActivate callback, no further events
 * will be fired until the next activation.
 */
var Draggable = (function (_super) {
    __extends(Draggable, _super);
    function Draggable() {
        _super.apply(this, arguments);
    }
    Draggable.prototype.render = function () {
        return React.Children.only(this.props.children);
    };
    Draggable.prototype.componentDidMount = function () {
        this.events = new dragEvents_1.DragEvents();
        this.events.attach(ReactDOM.findDOMNode(this), this.props);
    };
    Draggable.prototype.componentWillUnmount = function () {
        this.events.detach();
        delete this.events;
    };
    Draggable = __decorate([
        PureRender
    ], Draggable);
    return Draggable;
}(React.Component));
exports.Draggable = Draggable;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbnRlcmFjdGlvbnMvZHJhZ2dhYmxlLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7R0FLRzs7Ozs7Ozs7Ozs7OztBQUdILElBQVksVUFBVSxXQUFNLHVCQUF1QixDQUFDLENBQUE7QUFDcEQsSUFBWSxLQUFLLFdBQU0sT0FBTyxDQUFDLENBQUE7QUFDL0IsSUFBWSxRQUFRLFdBQU0sV0FBVyxDQUFDLENBQUE7QUFFdEMsMkJBQTJCLGNBQWMsQ0FBQyxDQUFBO0FBaUYxQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0JHO0FBRUg7SUFBK0IsNkJBQW9DO0lBQW5FO1FBQStCLDhCQUFvQztJQWdCbkUsQ0FBQztJQWJVLDBCQUFNLEdBQWI7UUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU0scUNBQWlCLEdBQXhCO1FBQ0ksSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBZ0IsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVNLHdDQUFvQixHQUEzQjtRQUNJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDckIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFoQkw7UUFBQyxVQUFVO2lCQUFBO0lBaUJYLGdCQUFDO0FBQUQsQ0FoQkEsQUFnQkMsQ0FoQjhCLEtBQUssQ0FBQyxTQUFTLEdBZ0I3QztBQWhCWSxpQkFBUyxZQWdCckIsQ0FBQSIsImZpbGUiOiJpbnRlcmFjdGlvbnMvZHJhZ2dhYmxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBQYWxhbnRpciBUZWNobm9sb2dpZXMsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QtMyBMaWNlbnNlIGFzIG1vZGlmaWVkICh0aGUg4oCcTGljZW5zZeKAnSk7IHlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIGxpY2Vuc2UgYXQgaHR0cHM6Ly9naXRodWIuY29tL3BhbGFudGlyL2JsdWVwcmludC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBhbmQgaHR0cHM6Ly9naXRodWIuY29tL3BhbGFudGlyL2JsdWVwcmludC9ibG9iL21hc3Rlci9QQVRFTlRTXG4gKi9cblxuaW1wb3J0IHsgSVByb3BzIH0gZnJvbSBcIkBibHVlcHJpbnRqcy9jb3JlXCI7XG5pbXBvcnQgKiBhcyBQdXJlUmVuZGVyIGZyb20gXCJwdXJlLXJlbmRlci1kZWNvcmF0b3JcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuXG5pbXBvcnQgeyBEcmFnRXZlbnRzIH0gZnJvbSBcIi4vZHJhZ0V2ZW50c1wiO1xuXG5leHBvcnQgdHlwZSBJQ2xpZW50Q29vcmRpbmF0ZXMgPSBbbnVtYmVyLCBudW1iZXJdO1xuXG4vKipcbiAqIFZhcmlvdXMgdXNlZnVsIGNvb3JkaW5hdGUgdmFsdWVzIGFyZSBwcmUtY29tcHV0ZWQgZm9yIHlvdSBhbmQgc3VwcGxpZWQgdG9cbiAqIG9uRHJhZ01vdmUgYW5kIG9uRHJhZ0VuZCBjYWxsYmFja3MuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUNvb3JkaW5hdGVEYXRhIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY2xpZW50IGNvb3JkaW5hdGVzIHdoZXJlIHRoZSBpbnRlcmFjdGlvbiB3YXMgYWN0aXZhdGVkLlxuICAgICAqL1xuICAgIGFjdGl2YXRpb246IElDbGllbnRDb29yZGluYXRlcztcblxuICAgIC8qKlxuICAgICAqIFRoZSBjbGllbnQgY29vcmRpbmF0ZXMgb2YgdGhlIGN1cnJlbnQgbW91c2UgZXZlbnQuXG4gICAgICovXG4gICAgY3VycmVudDogSUNsaWVudENvb3JkaW5hdGVzO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBjdXJyZW50IGFuZCBsYXN0IGNsaWVudCBjb29yZGluYXRlcy5cbiAgICAgKi9cbiAgICBkZWx0YTogSUNsaWVudENvb3JkaW5hdGVzO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNsaWVudCBjb29yZGluYXRlcyBvZiB0aGUgcHJldmlvdXMgbW91c2UgZXZlbnQuXG4gICAgICovXG4gICAgbGFzdDogSUNsaWVudENvb3JkaW5hdGVzO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBjdXJyZW50IGFuZCBhY3RpdmF0aW9uIGNsaWVudCBjb29yZGluYXRlcy5cbiAgICAgKi9cbiAgICBvZmZzZXQ6IElDbGllbnRDb29yZGluYXRlcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRHJhZ0hhbmRsZXIge1xuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHRoZSBtb3VzZSBpcyBwcmVzc2VkIGRvd24uIERyYWcgYW5kIGNsaWNrIG9wZXJhdGlvbnMgbWF5XG4gICAgICogYmUgY2FuY2VsbGVkIGF0IHRoaXMgcG9pbnQgYnkgcmV0dXJuaW5nIGZhbHNlIGZyb20gdGhpcyBtZXRob2QuXG4gICAgICogT3RoZXJ3aXNlLCBgc3RvcFByb3BhZ2F0aW9uYCBpcyBjYWxsZWQgb24gdGhlIGV2ZW50LlxuICAgICAqL1xuICAgIG9uQWN0aXZhdGU/OiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgZXZlcnkgdGltZSB0aGUgbW91c2UgaXMgbW92ZWQgYWZ0ZXIgYWN0aXZhdGlvbiBhbmQgYmVmb3JlIHRoZVxuICAgICAqIG1vdXNlIGlzIHJlbGVhc2VkLiBUaGlzIG1ldGhvZCBpcyBhbHNvIGNhbGxlZCBvbiB0aGUgbGFzdCBldmVuIHdoZW4gdGhlXG4gICAgICogbW91c2UgaXMgcmVsZWFzZWQuXG4gICAgICovXG4gICAgb25EcmFnTW92ZT86IChldmVudDogTW91c2VFdmVudCwgY29vcmRzOiBJQ29vcmRpbmF0ZURhdGEpID0+IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgbW91c2UgaXMgcmVsZWFzZWQgaWZmIHRoZSBtb3VzZSB3YXMgZHJhZ2dlZCBhZnRlclxuICAgICAqIGFjdGl2YXRpb24uXG4gICAgICovXG4gICAgb25EcmFnRW5kPzogKGV2ZW50OiBNb3VzZUV2ZW50LCBjb29yZHM6IElDb29yZGluYXRlRGF0YSkgPT4gdm9pZDtcblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHRoZSBtb3VzZSBpcyByZWxlYXNlZCBpZmYgdGhlIG1vdXNlIHdhcyBOT1QgZHJhZ2dlZCBhZnRlclxuICAgICAqIGFjdGl2YXRpb24uXG4gICAgICpcbiAgICAgKiBUaGlzIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5IGlmIGBvbkRvdWJsZUNsaWNrYCBpcyBkZWZpbmVkLiBTZWVcbiAgICAgKiB0aGF0IGNhbGxiYWNrIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICovXG4gICAgb25DbGljaz86IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZDtcblxuICAgIC8qKlxuICAgICAqIENhbGxlZCBpZmYgdGhlcmUgYXJlIHR3byBjbGljayBldmVudHMgd2l0aGluIHRoZSB0aW1lb3V0XG4gICAgICogYERyYWdFdmVudHMuRE9VQkxFX0NMSUNLX1RJTUVPVVRfTVNFQ2AsIHdoaWNoIGRlZmF1bHRzIHRvIDUwMCBtc2VjLlxuICAgICAqXG4gICAgICogTk9URTogRGVmaW5pbmcgdGhpcyBjYWxsYmFjayByZXF1aXJlcyB0aGF0IHdlIHdhaXQgdG8gaW52b2tlIHRoZVxuICAgICAqIGBvbkNsaWNrYCBjYWxsYmFjayB1bnRpbCB0aGUgdGltZW91dCBoYXMgZXhwaXJlZCBhbmQgd2UgYXJlIGNlcnRhaW4gdGhlXG4gICAgICogaW50ZXJhY3Rpb24gd2FzIG9ubHkgYSBzaW5nbGUgY2xpY2suIElmIHRoaXMgY2FsbGJhY2sgaXMgbm90IGRlZmluZWQsXG4gICAgICogdGhlIGBvbkNsaWNrYCBjYWxsYmFjayB3aWxsIGJlIGludm9rZWQgc3luY2hyb25vdXNseSB3aXRoIHRoZSBtb3VzZXVwXG4gICAgICogZXZlbnQuXG4gICAgICovXG4gICAgb25Eb3VibGVDbGljaz86IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRHJhZ2dhYmxlUHJvcHMgZXh0ZW5kcyBJUHJvcHMsIElEcmFnSGFuZGxlciB7XG59XG5cbi8qKlxuICogVGhpcyBjb21wb25lbnQgcHJvdmlkZXMgYSBzaW1wbGUgaW50ZXJmYWNlIGZvciBjb21iaW5lZCBkcmFnIGFuZC9vciBjbGlja1xuICogZXZlbnRzLlxuICpcbiAqIFNpbmNlIHRoZSBtb3VzZSBpbnRlcmFjdGlvbnMgZm9yIGRyYWcgYW5kIGNsaWNrIGFyZSBvdmVybG9hZGVkLCBoZXJlIGFyZVxuICogdGhlIGV2ZW50cyB0aGF0IHdpbGwgZmlyZSBpbiB0aGVzZSBjYXNlczpcbiAqXG4gKiBBIENsaWNrIEludGVyYWN0aW9uXG4gKiAxLiBUaGUgdXNlciBwcmVzc2VzIGRvd24gb24gdGhlIHJlbmRlciBlbGVtZW50LCB0cmlnZ2VyaW5nIHRoZSBvbkFjdGl2YXRlXG4gKiAgICBjYWxsYmFjay5cbiAqIDIuIFRoZSB1c2VyIHJlbGVhc2VzIHRoZSBtb3VzZSBidXR0b24gd2l0aG91dCBtb3ZpbmcgaXQsIHRyaWdnZXJpbmcgdGhlXG4gKiAgICBvbkNsaWNrIGNhbGxiYWNrLlxuICpcbiAqIEEgRHJhZyBJbnRlcmFjdGlvblxuICogMS4gVGhlIHVzZXIgcHJlc3NlcyBkb3duIG9uIHRoZSByZW5kZXIgZWxlbWVudCwgdHJpZ2dlcmluZyB0aGUgb25BY3RpdmF0ZVxuICogICAgY2FsbGJhY2suXG4gKiAyLiBUaGUgdXNlciBtb3ZlcyB0aGUgbW91c2UsIHRyaWdnZXJpbmcgdGhlIG9uRHJhZ01vdmUgY2FsbGJhY2suXG4gKiAzLiBUaGUgdXNlciBtb3ZlcyB0aGUgbW91c2UsIHRyaWdnZXJpbmcgdGhlIG9uRHJhZ01vdmUgY2FsbGJhY2suXG4gKiA0LiBUaGUgdXNlciBtb3ZlcyB0aGUgbW91c2UsIHRyaWdnZXJpbmcgdGhlIG9uRHJhZ01vdmUgY2FsbGJhY2suXG4gKiA1LiBUaGUgdXNlciByZWxlYXNlcyB0aGUgbW91c2UgYnV0dG9uLCB0cmlnZ2VyaW5nIGEgZmluYWwgb25EcmFnTW92ZVxuICogICAgY2FsbGJhY2sgYXMgd2VsbCBhcyBhbiBvbkRyYWdFbmQgY2FsbGJhY2suXG4gKlxuICogSWYgYGZhbHNlYCBpcyByZXR1cm5lZCBmcm9tIHRoZSBvbkFjdGl2YXRlIGNhbGxiYWNrLCBubyBmdXJ0aGVyIGV2ZW50c1xuICogd2lsbCBiZSBmaXJlZCB1bnRpbCB0aGUgbmV4dCBhY3RpdmF0aW9uLlxuICovXG5AUHVyZVJlbmRlclxuZXhwb3J0IGNsYXNzIERyYWdnYWJsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJRHJhZ2dhYmxlUHJvcHMsIHt9PiB7XG4gICAgcHJpdmF0ZSBldmVudHM6IERyYWdFdmVudHM7XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzID0gbmV3IERyYWdFdmVudHMoKTtcbiAgICAgICAgdGhpcy5ldmVudHMuYXR0YWNoKFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpIGFzIEhUTUxFbGVtZW50LCB0aGlzLnByb3BzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLmRldGFjaCgpO1xuICAgICAgICBkZWxldGUgdGhpcy5ldmVudHM7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
