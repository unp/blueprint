/**
 * Copyright 2016 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = require("@blueprintjs/core");
var classNames = require("classnames");
var React = require("react");
var draggable_1 = require("../interactions/draggable");
var EditableCell = (function (_super) {
    __extends(EditableCell, _super);
    function EditableCell() {
        var _this = this;
        _super.apply(this, arguments);
        this.handleCellRef = function (ref) {
            _this.cellElement = ref;
        };
        this.handleCellDoubleClick = function (_event) {
            if (_this.cellElement == null) {
                return;
            }
            var focusable = _this.cellElement.querySelector(".pt-editable-text");
            if (focusable.focus != null) {
                focusable.focus();
            }
        };
    }
    EditableCell.prototype.render = function () {
        var _a = this.props, className = _a.className, value = _a.value, intent = _a.intent, onCancel = _a.onCancel, onChange = _a.onChange, onConfirm = _a.onConfirm, style = _a.style, tooltip = _a.tooltip;
        return (React.createElement("div", {className: classNames(className, core_1.Classes.intentClass(intent), "bp-table-cell"), style: style, title: tooltip, ref: this.handleCellRef}, 
            React.createElement(draggable_1.Draggable, {onDoubleClick: this.handleCellDoubleClick}, 
                React.createElement(core_1.EditableText, {className: "bp-table-editable-name", defaultValue: value, intent: intent, minWidth: null, onCancel: onCancel, onChange: onChange, onConfirm: onConfirm, placeholder: "", selectAllOnFocus: true})
            )
        ));
    };
    return EditableCell;
}(React.Component));
exports.EditableCell = EditableCell;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jZWxsL2VkaXRhYmxlQ2VsbC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7Ozs7O0dBS0c7Ozs7Ozs7QUFFSCxxQkFBc0MsbUJBQW1CLENBQUMsQ0FBQTtBQUMxRCxJQUFZLFVBQVUsV0FBTSxZQUFZLENBQUMsQ0FBQTtBQUN6QyxJQUFZLEtBQUssV0FBTSxPQUFPLENBQUMsQ0FBQTtBQUMvQiwwQkFBMEIsMkJBQTJCLENBQUMsQ0FBQTtBQStCdEQ7SUFBa0MsZ0NBQXVDO0lBQXpFO1FBQUEsaUJBMkNDO1FBM0NpQyw4QkFBdUM7UUE2QjdELGtCQUFhLEdBQUcsVUFBQyxHQUFnQjtZQUNyQyxLQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztRQUMzQixDQUFDLENBQUE7UUFFTywwQkFBcUIsR0FBRyxVQUFDLE1BQWtCO1lBQy9DLEVBQUUsQ0FBQyxDQUFDLEtBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDM0IsTUFBTSxDQUFDO1lBQ1gsQ0FBQztZQUVELElBQU0sU0FBUyxHQUFJLEtBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFpQixDQUFDO1lBQ3ZGLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDMUIsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3RCLENBQUM7UUFDTCxDQUFDLENBQUE7SUFDTCxDQUFDO0lBeENVLDZCQUFNLEdBQWI7UUFDSSxJQUFBLGVBQThGLEVBQXRGLHdCQUFTLEVBQUUsZ0JBQUssRUFBRSxrQkFBTSxFQUFFLHNCQUFRLEVBQUUsc0JBQVEsRUFBRSx3QkFBUyxFQUFFLGdCQUFLLEVBQUUsb0JBQU8sQ0FBZ0I7UUFDL0YsTUFBTSxDQUFDLENBQ0gscUJBQUMsR0FBRyxJQUNBLFNBQVMsRUFBRSxVQUFVLENBQUMsU0FBUyxFQUFFLGNBQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsZUFBZSxDQUFFLEVBQy9FLEtBQUssRUFBRSxLQUFNLEVBQ2IsS0FBSyxFQUFFLE9BQVEsRUFDZixHQUFHLEVBQUUsSUFBSSxDQUFDLGFBQWM7WUFFeEIsb0JBQUMscUJBQVMsR0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLHFCQUFzQjtnQkFDakQsb0JBQUMsbUJBQVksR0FDVCxTQUFTLEVBQUUsd0JBQXlCLEVBQ3BDLFlBQVksRUFBRSxLQUFNLEVBQ3BCLE1BQU0sRUFBRSxNQUFPLEVBQ2YsUUFBUSxFQUFFLElBQUssRUFDZixRQUFRLEVBQUUsUUFBUyxFQUNuQixRQUFRLEVBQUUsUUFBUyxFQUNuQixTQUFTLEVBQUUsU0FBVSxFQUNyQixXQUFXLEVBQUMsRUFBRSxFQUNkLGdCQUFnQixFQUFFLElBQUssRUFDekI7YUFDTTtTQUNWLENBQ1QsQ0FBQztJQUNOLENBQUM7SUFnQkwsbUJBQUM7QUFBRCxDQTNDQSxBQTJDQyxDQTNDaUMsS0FBSyxDQUFDLFNBQVMsR0EyQ2hEO0FBM0NZLG9CQUFZLGVBMkN4QixDQUFBIiwiZmlsZSI6ImNlbGwvZWRpdGFibGVDZWxsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIENvcHlyaWdodCAyMDE2IFBhbGFudGlyIFRlY2hub2xvZ2llcywgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRC0zIExpY2Vuc2UgYXMgbW9kaWZpZWQgKHRoZSDigJxMaWNlbnNl4oCdKTsgeW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgbGljZW5zZSBhdCBodHRwczovL2dpdGh1Yi5jb20vcGFsYW50aXIvYmx1ZXByaW50L2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGFuZCBodHRwczovL2dpdGh1Yi5jb20vcGFsYW50aXIvYmx1ZXByaW50L2Jsb2IvbWFzdGVyL1BBVEVOVFNcbiAqL1xuXG5pbXBvcnQgeyBDbGFzc2VzLCBFZGl0YWJsZVRleHQgfSBmcm9tIFwiQGJsdWVwcmludGpzL2NvcmVcIjtcbmltcG9ydCAqIGFzIGNsYXNzTmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgRHJhZ2dhYmxlIH0gZnJvbSBcIi4uL2ludGVyYWN0aW9ucy9kcmFnZ2FibGVcIjtcbmltcG9ydCB7IElDZWxsUHJvcHMgfSBmcm9tIFwiLi9jZWxsXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUVkaXRhYmxlQ2VsbFByb3BzIGV4dGVuZHMgSUNlbGxQcm9wcyB7XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIGRpc3BsYXllZCBpbiB0aGUgdGV4dCBib3guIEJlIHN1cmUgdG8gdXBkYXRlIHRoaXMgdmFsdWUgd2hlblxuICAgICAqIHJlbmRlcmluZyB0aGlzIGNvbXBvbmVudCBhZnRlciBhIGNvbmZpcm1lZCBjaGFuZ2UuXG4gICAgICovXG4gICAgdmFsdWU/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBIGxpc3RlbmVyIHRoYXQgaXMgdHJpZ2dlcmVkIGlmIHRoZSB1c2VyIGNhbmNlbHMgdGhlIGVkaXQuIFRoaXMgaXNcbiAgICAgKiBpbXBvcnRhbnQgdG8gbGlzdGVuIHRvIGlmIHlvdSBhcmUgZG9pbmcgYW55dGhpbmcgd2l0aCBvbkNoYW5nZSBldmVudHMsXG4gICAgICogc2luY2UgeW91J2xsIGxpa2VseSB3YW50IHRvIHJldmVydCB3aGF0ZXZlciBjaGFuZ2VzIHlvdSBtYWRlLlxuICAgICAqL1xuICAgIG9uQ2FuY2VsPzogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBBIGxpc3RlbmVyIHRoYXQgaXMgdHJpZ2dlcmVkIGFzIHNvb24gYXMgdGhlIGVkaXRhYmxlIG5hbWUgaXMgbW9kaWZpZWQuXG4gICAgICogVGhpcyBjYW4gYmUgZHVlLCBmb3IgZXhhbXBsZSwgdG8ga2V5Ym9hcmQgaW5wdXQgb3IgdGhlIGNsaXBib2FyZC5cbiAgICAgKi9cbiAgICBvbkNoYW5nZT86ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogQSBsaXN0ZW5lciB0aGF0IGlzIHRyaWdnZXJlZCBvbmNlIHRoZSBlZGl0aW5nIGlzIGNvbmZpcm1lZC4gVGhpcyBpc1xuICAgICAqIHVzdWFsbHkgZHVlIHRvIHRoZSA8a2JkIGNsYXNzPVwicHQta2V5XCI+cmV0dXJuPC9rYmQ+IChvclxuICAgICAqIDxrYmQgY2xhc3M9XCJwdC1rZXlcIj5lbnRlcjwva2JkPikga2V5IHByZXNzLlxuICAgICAqL1xuICAgIG9uQ29uZmlybT86ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgRWRpdGFibGVDZWxsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElFZGl0YWJsZUNlbGxQcm9wcywge30+IHtcbiAgICBwcml2YXRlIGNlbGxFbGVtZW50OiBIVE1MRWxlbWVudDtcblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgY2xhc3NOYW1lLCB2YWx1ZSwgaW50ZW50LCBvbkNhbmNlbCwgb25DaGFuZ2UsIG9uQ29uZmlybSwgc3R5bGUsIHRvb2x0aXAgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKGNsYXNzTmFtZSwgQ2xhc3Nlcy5pbnRlbnRDbGFzcyhpbnRlbnQpLCBcImJwLXRhYmxlLWNlbGxcIil9XG4gICAgICAgICAgICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgICAgICAgICAgIHRpdGxlPXt0b29sdGlwfVxuICAgICAgICAgICAgICAgIHJlZj17dGhpcy5oYW5kbGVDZWxsUmVmfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxEcmFnZ2FibGUgb25Eb3VibGVDbGljaz17dGhpcy5oYW5kbGVDZWxsRG91YmxlQ2xpY2t9PlxuICAgICAgICAgICAgICAgICAgICA8RWRpdGFibGVUZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wiYnAtdGFibGUtZWRpdGFibGUtbmFtZVwifVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVudD17aW50ZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgbWluV2lkdGg9e251bGx9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNhbmNlbD17b25DYW5jZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNvbmZpcm09e29uQ29uZmlybX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEFsbE9uRm9jdXM9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9EcmFnZ2FibGU+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUNlbGxSZWYgPSAocmVmOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICB0aGlzLmNlbGxFbGVtZW50ID0gcmVmO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlQ2VsbERvdWJsZUNsaWNrID0gKF9ldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5jZWxsRWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmb2N1c2FibGUgPSAodGhpcy5jZWxsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnB0LWVkaXRhYmxlLXRleHRcIikgYXMgSFRNTEVsZW1lbnQpO1xuICAgICAgICBpZiAoZm9jdXNhYmxlLmZvY3VzICE9IG51bGwpIHtcbiAgICAgICAgICAgIGZvY3VzYWJsZS5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
