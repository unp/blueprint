/*
 * Copyright 2016 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var classNames = require("classnames");
var moment = require("moment");
var React = require("react");
var core_1 = require("@blueprintjs/core");
var datePicker_1 = require("./datePicker");
var datePickerCore_1 = require("./datePickerCore");
var DateInput = (function (_super) {
    __extends(DateInput, _super);
    function DateInput(props, context) {
        var _this = this;
        _super.call(this, props, context);
        this.displayName = "Blueprint.DateInput";
        this.inputRef = null;
        this.getDateString = function (value) {
            if (_this.isNull(value)) {
                return "";
            }
            if (value.isValid()) {
                if (_this.dateIsInRange(value)) {
                    return value.format(_this.props.format);
                }
                else {
                    return _this.props.outOfRangeMessage;
                }
            }
            return _this.props.invalidDateMessage;
        };
        this.handleClosePopover = function () {
            _this.setState({ isOpen: false });
        };
        this.handleDateChange = function (date, hasUserManuallySelectedDate) {
            var momentDate = _this.fromDateToMoment(date);
            var hasMonthChanged = date !== null && !_this.isNull(_this.state.value) && _this.state.value.isValid() &&
                momentDate.month() !== _this.state.value.month();
            var isOpen = !(_this.props.closeOnSelection && hasUserManuallySelectedDate && !hasMonthChanged);
            if (_this.props.value === undefined) {
                _this.setState({ isInputFocused: false, isOpen: isOpen, value: momentDate });
            }
            else {
                _this.setState({ isInputFocused: false, isOpen: isOpen });
            }
            core_1.Utils.safeInvoke(_this.props.onChange, _this.fromMomentToDate(momentDate));
        };
        this.handleIconClick = function (e) {
            if (_this.state.isOpen) {
                if (_this.inputRef != null) {
                    _this.inputRef.blur();
                }
            }
            else {
                _this.setState({ isOpen: true });
                e.stopPropagation();
                if (_this.inputRef != null) {
                    _this.inputRef.focus();
                }
            }
        };
        this.handleInputFocus = function () {
            var valueString = _this.isNull(_this.state.value) ? "" : _this.state.value.format(_this.props.format);
            if (_this.props.openOnFocus) {
                _this.setState({ isInputFocused: true, isOpen: true, valueString: valueString });
            }
            else {
                _this.setState({ isInputFocused: true, valueString: valueString });
            }
        };
        this.handleInputClick = function (e) {
            if (_this.props.openOnFocus) {
                e.stopPropagation();
            }
        };
        this.handleInputChange = function (e) {
            var valueString = e.target.value;
            var value = moment(valueString, _this.props.format);
            if (value.isValid() && _this.dateIsInRange(value)) {
                if (_this.props.value === undefined) {
                    _this.setState({ value: value, valueString: valueString });
                }
                else {
                    _this.setState({ valueString: valueString });
                }
                core_1.Utils.safeInvoke(_this.props.onChange, _this.fromMomentToDate(value));
            }
            else {
                _this.setState({ valueString: valueString });
            }
        };
        this.handleInputBlur = function () {
            var valueString = _this.state.valueString;
            var value = moment(valueString, _this.props.format);
            if (valueString.length > 0
                && valueString !== _this.getDateString(_this.state.value)
                && (!value.isValid() || !_this.dateIsInRange(value))) {
                if (_this.props.value === undefined) {
                    _this.setState({ isInputFocused: false, value: value, valueString: null });
                }
                else {
                    _this.setState({ isInputFocused: false });
                }
                if (!value.isValid()) {
                    core_1.Utils.safeInvoke(_this.props.onError, new Date(undefined));
                }
                else if (!_this.dateIsInRange(value)) {
                    core_1.Utils.safeInvoke(_this.props.onError, _this.fromMomentToDate(value));
                }
                else {
                    core_1.Utils.safeInvoke(_this.props.onChange, _this.fromMomentToDate(value));
                }
            }
            else {
                if (valueString.length === 0) {
                    _this.setState({ isInputFocused: false, value: moment(null), valueString: null });
                }
                else {
                    _this.setState({ isInputFocused: false });
                }
            }
        };
        this.setInputRef = function (el) {
            _this.inputRef = el;
        };
        /**
         * Translate a moment into a Date object, adjusting the moment timezone into the local one.
         * This is a no-op unless moment-timezone's setDefault has been called.
         */
        this.fromMomentToDate = function (momentDate) {
            if (momentDate == null) {
                return undefined;
            }
            else {
                return new Date(momentDate.year(), momentDate.month(), momentDate.date(), momentDate.hours(), momentDate.minutes(), momentDate.seconds(), momentDate.milliseconds());
            }
        };
        /**
         * Translate a Date object into a moment, adjusting the local timezone into the moment one.
         * This is a no-op unless moment-timezone's setDefault has been called.
         */
        this.fromDateToMoment = function (date) {
            if (date == null || typeof date === "string") {
                return moment(date);
            }
            else {
                return moment([
                    date.getFullYear(),
                    date.getMonth(),
                    date.getDate(),
                    date.getHours(),
                    date.getMinutes(),
                    date.getSeconds(),
                    date.getMilliseconds(),
                ]);
            }
        };
        var defaultValue = this.props.defaultValue ? this.fromDateToMoment(this.props.defaultValue) : moment(null);
        this.state = {
            isInputFocused: false,
            isOpen: false,
            value: this.props.value !== undefined ? this.fromDateToMoment(this.props.value) : defaultValue,
            valueString: null,
        };
    }
    DateInput.prototype.render = function () {
        var dateString = this.state.isInputFocused ? this.state.valueString : this.getDateString(this.state.value);
        var date = this.state.isInputFocused ? moment(this.state.valueString, this.props.format) : this.state.value;
        var popoverContent = (React.createElement(datePicker_1.DatePicker, __assign({}, this.props, {canClearSelection: this.props.canClearSelection, defaultValue: null, onChange: this.handleDateChange, value: this.validAndInRange(this.state.value) ? this.fromMomentToDate(this.state.value) : null})));
        var inputClasses = classNames({
            "pt-intent-danger": !(this.validAndInRange(date) || this.isNull(date) || dateString === ""),
        });
        var calendarIcon = (React.createElement(core_1.Button, {className: core_1.Classes.MINIMAL, disabled: this.props.disabled, iconName: "calendar", intent: core_1.Intent.PRIMARY, onClick: this.handleIconClick}));
        return (React.createElement(core_1.Popover, {autoFocus: false, content: popoverContent, enforceFocus: false, inline: true, isOpen: this.state.isOpen, onClose: this.handleClosePopover, popoverClassName: "pt-dateinput-popover", position: this.props.popoverPosition}, 
            React.createElement(core_1.InputGroup, {className: inputClasses, disabled: this.props.disabled, inputRef: this.setInputRef, type: "text", onBlur: this.handleInputBlur, onChange: this.handleInputChange, onClick: this.handleInputClick, onFocus: this.handleInputFocus, placeholder: this.props.format, rightElement: calendarIcon, value: dateString})
        ));
    };
    DateInput.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps.value !== this.props.value) {
            this.setState({ value: this.fromDateToMoment(nextProps.value) });
        }
        _super.prototype.componentWillReceiveProps.call(this, nextProps);
    };
    DateInput.prototype.validAndInRange = function (value) {
        return value.isValid() && this.dateIsInRange(value);
    };
    DateInput.prototype.isNull = function (value) {
        return value.parsingFlags().nullInput;
    };
    DateInput.prototype.dateIsInRange = function (value) {
        return value.isBetween(this.props.minDate, this.props.maxDate, "day", "[]");
    };
    DateInput.defaultProps = {
        closeOnSelection: true,
        disabled: false,
        format: "YYYY-MM-DD",
        invalidDateMessage: "Invalid date",
        maxDate: datePickerCore_1.getDefaultMaxDate(),
        minDate: datePickerCore_1.getDefaultMinDate(),
        openOnFocus: true,
        outOfRangeMessage: "Out of range",
        popoverPosition: core_1.Position.BOTTOM,
    };
    return DateInput;
}(core_1.AbstractComponent));
exports.DateInput = DateInput;

//# sourceMappingURL=data:application/json;base64,
